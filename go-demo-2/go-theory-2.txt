// // GO THEORY 2 // //

// ARRAYS
// SLICES
// CAPACITY & LENGTH
// DYNAMIC SLICES
// EXERCISE 1
// UNPACK
// ARRAY'S LOOPS
// EXERCISE 2
//
//
//


// 
// // ARRAYS & SLICES
// 

// Массив - последовательность однотипных данных, с фиксированной длиной.
// Каждому элементу массива присвоен свой индекс, начиная с 0.

// Способы объявления массивов:
var arrayName [length]type
var transactions [3]int
transactions = [3]int{5, 10, -7}
banks := [2]string{"Сбер", "Альфа"}

// Получение элемента по индексу:
fmt.Println(transactions[0])
// logs 5

// Запись элемента по индексу:
banks[0] = "Сбер"
fmt.Println(banks)
// logs ["Сбер" ]


// 
// // SLICES
// 

// Слайс (Срез) - срез массива без фиксированной длинны с указанием индексов начального
// и конечного элемента. 

// Объявление среза: 
partial := transactions[1:4]
// logs [2, 3, 4]
// 1 - индекс элемента, с которого будет начинаться срез.
// 4 - индекс элемента, до которого будет продолжаться срез, не включая сам этот элемент.
// Левая граница будет включена в срез, правая исключена.

partial2 := transactions[:4]
// Если не указан начальный индекс элемента, то срез будет состоять 
// из промежутка от начального до 4 индекса массива transactions, не включая сам элемент 4го индекса.

partial3 := transactions[1:]
// Если не указан конечный индекс элемента, то срез будет состоять 
// из промежутка от элемента индекса 1 до конца массива transactions, не включая сам элемент 4го индекса.

partial4 := transactions[:]
// Если не указаны начальный и конечный индексы массива transactions,
// то в переменную partial4 будет скопирован весь массив transactions.

func main() {
	transactions := [5]int{1, 2, 3, 4, 5}
	banks := [2]string{}

	fmt.Println(transactions[1])
	banks[0] = "Сбер"
	fmt.Println(banks)

	partial1 := transactions[1:4]
	// logs [2, 3, 4]

	partial2 := transactions[:4]
	// logs [1, 2, 3, 4]
}


// 
// // CAPACITY & LENGTH
// 

func main() {
	transactions := [5]int{1, 2, 3, 4, 5}
	transactionsPartial := transactions[1:]
	transactionsPartial[0] = 30

	fmt.Println(transactions)
	fmt.Println(transactionsPartial)
}

// Если поменять элемент среза массива, в исходном массиве элемент так же поменяется,
// потому что срезы - ссылочные типы данных.
// Массивы занимают фиксированное месть в памяти, а срезы - ссылки на них.
// logs:
// [1 30 3 4 5]
// [30 3 4 5]

// // У срезов есть 2 свойства:
// cap - Capacity вместимость
//
// len - Length длина

// ARRAY ======== 520, 230, 320, 100
// SLICE OF ARRAY [1:] 230, 320, 100 - len 3, cap 3
// SLICE OF SLICE [:1] 230, ___, ___ - len 3, cap 1

fmt.Println(transactions) // logs [1 30 3 4 5]
fmt.Println(transactionsPartial) // logs [30 3 4 5]
fmt.Println(transactionsNewPartial) // logs [30]
fmt.Println(len(transactionsPartial), cap(transactionsPartial)) // logs 4 4
fmt.Println(len(transactionsNewPartial), cap(transactionsNewPartial)) // logs 1 4

///////
package main

import "fmt"

func main() {
	transactions := [6]int{1, 2, 3, 4, 5, 6}
	transactionsPartial := transactions[1:5]
	transactionsNewPartial := transactionsPartial[:1]
	transactionsNewPartial[0] = 30

	transactionsNewPartial = transactionsNewPartial[0:4]

	fmt.Println(transactions)
	fmt.Println(transactionsPartial)
	fmt.Println(transactionsNewPartial)
	fmt.Println(len(transactionsPartial), cap(transactionsPartial))
	fmt.Println(len(transactionsNewPartial), cap(transactionsNewPartial))
}
///////


// 
// // DYNAMIC SLICES
// 

// transactions := []int{10, 20, 30}
// transactions теперь не имеет максимальной длины
// Добавлять элементы можно с помощью метода append(slice, el).
// append сначала принимает slice, в который мы хотим добавить элемент,
// вторым аргументом принимает элемент или другой slice, который мы хотим добавить.
// append сначала проверяет доступную capacity, прежде чем добавить элемент.
// Если capacity недостаточно, он её увеличивает, затем присваивает новый элемент.
// Затем новой переменной присваивает slice с новым элементом.
// append() возвращает новый slice.
transactions := []int{10, 20, 30}
append(transactions, 100, 200)

// Так же можно добавить в transactions новый элемент путём его переопределения:
transactions := []int{10, 20, 30}
transactions = append(transactions, 50)
append(transactions, 100, 200)
// logs [10 20 30 50 100 200]

// После применения append, создаётся новый указатель на место в памяти.

// 
// // EXERCISE 1
// 

// 1. Спросить пользователя в цикле ввод транзакции (число).
// 2. Добавлять вводы пользователя в массив транзакций.
// 3. Вывести массив транзакций.

///////
package main

import "fmt"

func main() {
	transactions := []float64{}
	for {
		transaction := scanTransaction()
		if transaction == 0 {
			break
		}
		transactions = append(transactions, transaction)
	}
	fmt.Println(transactions)
}

func scanTransaction() float64 {
	fmt.Print("Введите вашу транзакцию (n для выхода): ")
	var transaction float64
	fmt.Scan(&transaction)
	return transaction
}
/////// 


//
// // UNPACK
// 

// slice... - распаковка слайсов для метода append()

tr1 := []int{1, 2, 3}
tr2 := []int{4, 5, 6}
tr1 = append(tr1, tr2...)
fmt.Print(tr1)
// logs [1 2 3 4 5 6]


// 
// // ARRAY'S LOOPS
// 

// Записываем цикл for, дальше переменные index и value, 
// которые мы хотим получить из нашего массива на каждой итерации, 
// для этого используется ключевое слово range и массив, по которому мы будем проходиться.

tr1 := []int{1, 2, 3}
tr2 := []int{4, 5, 6}
tr1 = append(tr1, tr2...)
fmt.Println(tr1)
for _, value := range tr1 {
	fmt.Println(value)
}

// logs:
// 1
// 2
// 3
// 4
// 5
// 6


// 
// // EXERCISE 2
// 

// 4. Рассчитать и вывести сумму всех транзакций.

///////
package main

import "fmt"

func main() {
	transactions := []float64{}
	for {
		transaction := scanTransaction()
		if transaction == 0 {
			break
		}
		transactions = append(transactions, transaction)
	}
	sum := calculateBalance(transactions)
	fmt.Printf("Ваш баланс: %.2f", sum)
}

func scanTransaction() float64 {
	fmt.Print("Введите вашу транзакцию (n для выхода): ")
	var transaction float64
	fmt.Scan(&transaction)
	return transaction
}

func calculateBalance(arr[]float64) float64 {
	sum := 0.0
	for _, value := range arr {
		sum += value
	}
	return sum
}
/////// 

