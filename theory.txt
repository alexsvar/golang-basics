GO THEORY

// PACKAGES
// MODULES
// VARIABLES & VALUES
// TYPES
// CONSTANTS
// INPUT & OUTPUT STRINGS
// STRINGS FORMATTING
// CREATING FUNCTIONS
// DATA TYPES
// BOOLEAN LOGIC
//


//
// // PACKAGES
// 

// Пакет не является модулем.

///////
package main

import "fmt"

func main() {
	fmt.Printf("Привет")
}
///////

// Виды пакетов:
// main - точка входа в приложение.
// services/... - наши собственные модули приложения.
// fmt - стандартный пакет библиотеки Go.
// github.com/gabriel-vasile/mimetype - внешний пакет.

// Запуск в консоли:
>  go run main.go


// 
// // MODULES
// 

// app module:
// // package main
// // package 1
// // package 2

// Чтобы сосдать модуль, нужно воспользоваться командой консоли:
>  go mod init <name/path>

// Для сборки приложения, нужно использовать команду консоли:
>  go build

// Бинарный файл берёт название из модуля app-1.
// Этот файл должен игнорироваться git.
// Чтобы исполнить появившийся бинарный файл, ввести команду в консоли:
>  ./app-1

///////
module demo/app-1
 
go 1.24.5
///////


// 
// // VARIABLES & VALUES
// 

///////
package main

func main() {
	var userHeight float64 = 1.8
	var userWeight int = 100
	var bmi int = userWeight / int(userHeight)^2
}
///////

// 
// // TYPES
// 

// int - целые числа
// float64 - числа с плавающей точкой
// string - строка
// bool - булево значение

///////
package main

import (
	"fmt"
	"math"
)

func main() {
	userHeight float64 := 1.8
	var userWeight = 100
	var bmi = float64(userWeight) / math.Pow(userHeight, 2)
	fmt.Print(bmi)
}
///////


// 
// // CONSTANTS
// 

///////
package main

import (
	"fmt"
	"math"
)

func main() {
	const bmiPower = 2
	userHeight := 1.8
	userWeight := 100.0
	bmi := userWeight / math.Pow(userHeight, bmiPower)
	fmt.Print(bmi)
}
///////


// 
// // INPUT & OUTPUT STRINGS
// 

///////
package main

import (
	"fmt"
	"math"
)

func main() {
	const bmiPower = 2
	var userHeight float64
	var userWeight float64
	fmt.Print("__ Калькулятор индекса массы тела __\n")
	fmt.Print("Введите свой рост в метрах: ")
	fmt.Scan(&userHeight)
	fmt.Print("Введите свой вес: ")
	fmt.Scan(&userWeight)
	bmi := userWeight / math.Pow(userHeight, bmiPower)
	fmt.Print("Ваш индекс массы тела: ")
	fmt.Print(bmi)
}
///////

// 
// // STRINGS FORMATTING
// 

// fmt.Print() - позволяет вывести строку.

// fmt.Println() - позволяет вывести строку с переносом
// на следующую строку.

// fmt.Printf() - позволяет вывести строку с переменной.


//
// // CREATING FUNCTIONS
// 

///////
package main

import (
	"fmt"
	"math"
)

func main() {
	const bmiPower = 2
	var userHeight float64
	var userWeight float64
	fmt.Println("__ Калькулятор индекса массы тела __")
	fmt.Print("Введите свой рост в сантиметрах: ")
	fmt.Scan(&userHeight)
	fmt.Print("Введите свой вес: ")
	fmt.Scan(&userWeight)
	BMI := userWeight / math.Pow(userHeight / 100, bmiPower) 
	outputResult(BMI)
}

func outputResult(bmi float64) {
	result := fmt.Sprintf("Ваш индекс массы тела: %.0f", bmi)
	fmt.Print(result)
}
///////


// 
// // DATA TYPES
// 

// // INTEGER
// int8 - 8-битные числа со знаком. От -128 до 127.
// int16 - 8-битные числа со знаком. От -32768 до 32767.
// int32 - 8-битные числа со знаком. От -2147483648 до 2147483647.
// int64 - 8-битные числа со знаком. От -9223372036854775808 до 9223372036854775807.
// int - 32-битные или 64-битные числа со знаком (в зависимости от платформы).
// int используется для работы с целочисленными значениями по умолчанию.
// 
// uint8 - 8-битные числа без знака. От 0 до 255.
// uint16 - 8-битные числа без знака. От 0 до 65535.
// uint32 - 8-битные числа без знака. От 0 до 4294967295.
// uint64 - 8-битные числа без знака. От 0 до 18446744073709551615.
// uint - 32-битные или 64-битные числа без знака (в зависимости от платформы).

// // FLOAT
// float32 - точность до 7 знаков после запятой, 32 бита. от -3.4028235E+38 до 3.4028235E+38.
// float64 - точность до 15 знаков после запятой, 64 бита. от -1.7976931348623157E+308 до 1.7976931348623157E+308.

// // STRING 
// string - строковый тип данных. "любая строка и символы".

// // BOOLEAN
// bool - логичческий тип данных. true или false.


// 
// // BOOLEAN LOGIC
// 

// A и B (A > 0 && A < 10)
// ======== TRUE === FALSE
// TRUE === TRUE === FALSE
// FALSE == FLASE == FALSE

// A или B (A > 10 || A < 0)
// ======== TRUE === FALSE
// TRUE === TRUE === TRUE
// FALSE == TRUE === FALSE

// NOT A !(A > 10) -> A <=10
// TRUE ==========> FALSE
// FALSE <========= TRUE